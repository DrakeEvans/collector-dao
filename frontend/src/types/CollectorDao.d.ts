/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CollectorDaoInterface extends ethers.utils.Interface {
  functions: {
    "buyMembership()": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "delegateVote(address)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "members(address)": FunctionFragment;
    "nextProposalId()": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "setWrappedEthAddress(address)": FunctionFragment;
    "submitProposal(address,bytes,uint256)": FunctionFragment;
    "totalMembers()": FunctionFragment;
    "unDelegateVote()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buyMembership", values?: undefined): string;
  encodeFunctionData(functionFragment: "castVote", values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "delegateVote", values: [string]): string;
  encodeFunctionData(functionFragment: "executeProposal", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(functionFragment: "nextProposalId", values?: undefined): string;
  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "onERC721Received", values: [string, string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "proposals", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setWrappedEthAddress", values: [string]): string;
  encodeFunctionData(functionFragment: "submitProposal", values: [string, BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "totalMembers", values?: undefined): string;
  encodeFunctionData(functionFragment: "unDelegateVote", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyMembership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegateVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextProposalId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWrappedEthAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unDelegateVote", data: BytesLike): Result;

  events: {};
}

export class CollectorDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CollectorDaoInterface;

  functions: {
    buyMembership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateVote(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        startDate: BigNumber;
        delegateTo: string;
        originalAddress: string;
        votingPower: BigNumber;
      }
    >;

    nextProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, string] & {
        _operator: string;
        _from: string;
        _tokenId: BigNumber;
        _data: string;
      }
    >;

    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        isExecuted: boolean;
        quorumDeadline: BigNumber;
        deadline: BigNumber;
        value: BigNumber;
        signature: string;
        contractAddress: string;
        yesTotal: BigNumber;
        noTotal: BigNumber;
      }
    >;

    setWrappedEthAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    submitProposal(
      contractAddress: string,
      signature: BytesLike,
      quorumDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalMembers(overrides?: CallOverrides): Promise<[BigNumber]>;

    unDelegateVote(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  buyMembership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    vote: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateVote(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  members(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, string, BigNumber] & {
      startDate: BigNumber;
      delegateTo: string;
      originalAddress: string;
      votingPower: BigNumber;
    }
  >;

  nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, string] & {
      _operator: string;
      _from: string;
      _tokenId: BigNumber;
      _data: string;
    }
  >;

  onERC721Received(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      isExecuted: boolean;
      quorumDeadline: BigNumber;
      deadline: BigNumber;
      value: BigNumber;
      signature: string;
      contractAddress: string;
      yesTotal: BigNumber;
      noTotal: BigNumber;
    }
  >;

  setWrappedEthAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  submitProposal(
    contractAddress: string,
    signature: BytesLike,
    quorumDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

  unDelegateVote(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    buyMembership(overrides?: CallOverrides): Promise<void>;

    castVote(proposalId: BigNumberish, vote: boolean, overrides?: CallOverrides): Promise<void>;

    delegateVote(to: string, overrides?: CallOverrides): Promise<void>;

    executeProposal(proposalId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    members(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        startDate: BigNumber;
        delegateTo: string;
        originalAddress: string;
        votingPower: BigNumber;
      }
    >;

    nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, string] & {
        _operator: string;
        _from: string;
        _tokenId: BigNumber;
        _data: string;
      }
    >;

    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        isExecuted: boolean;
        quorumDeadline: BigNumber;
        deadline: BigNumber;
        value: BigNumber;
        signature: string;
        contractAddress: string;
        yesTotal: BigNumber;
        noTotal: BigNumber;
      }
    >;

    setWrappedEthAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    submitProposal(
      contractAddress: string,
      signature: BytesLike,
      quorumDeadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

    unDelegateVote(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyMembership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegateVote(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setWrappedEthAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    submitProposal(
      contractAddress: string,
      signature: BytesLike,
      quorumDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

    unDelegateVote(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    buyMembership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateVote(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    members(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setWrappedEthAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    submitProposal(
      contractAddress: string,
      signature: BytesLike,
      quorumDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unDelegateVote(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
